import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
import math
print("Task 1")

file_path = "Real_Estate_Sales_2001-2022_GL-Short.csv"
df = pd.read_csv(file_path, na_filter=False)
print("- DataFrame:")
print(df.head(), "\n")
print(df.info(), "\n")
print(df.dtypes, "\n")
print(df.describe(), "\n")
print("Shape:", df.shape, "\n")

df = df.dropna(subset=["Assessed Value", "Sale Amount"])
X1 = df["Assessed Value"].values.reshape(-1, 1)
y1 = df["Sale Amount"].values

X1_train, X1_test, y1_train, y1_test = train_test_split(
    X1, y1, test_size=0.10, random_state=42
)

model1 = LinearRegression()
model1.fit(X1_train, y1_train)

intercept1 = model1.intercept_
slope1 = model1.coef_[0]
print(f"Intercept: {intercept1}")
print(f"Slope: {slope1}")

def predict_sale_amount(assessed_value):
    return intercept1 + slope1 * assessed_value

sample_vals1 = df["Assessed Value"].sample(3, random_state=1).values
print("Predictions:")
for val in sample_vals1:
    print(f"Assessed Value = {val} Predicted Sale Amount = {predict_sale_amount(val)}")

y1_pred = model1.predict(X1_test)

mae1 = mean_absolute_error(y1_test, y1_pred)
mse1 = mean_squared_error(y1_test, y1_pred)
rmse1 = math.sqrt(mse1)

print(f"MAE: {mae1}")
print(f"MSE: {mse1}")
print(f"RMSE: {rmse1}")
print("Thank you ❤️ ")
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
import math
# file_path = "zameencom-property-data-By-Kaggle-Short - Copy"
# df = pd.read_csv(file_path, na_filter=False)

import os

file_path = r'C:\Users\DELL\Desktop\my\Assignment 4\zameencom-property-data-By-Kaggle-Short - Copy'

if os.path.exists(file_path):
    print(f"File '{file_path}' exists.")
    # Proceed with reading the file
    # df = pd.read_csv(file_path, na_filter=False)
else:
    print(f"File '{file_path}' does not exist. Please check the path and filename.")
    print(f"Current working directory: {os.getcwd()}")
print("DataFrame:")
print(df.head(), "\n")
print(df.info(), "\n")
print(df.dtypes, "\n")
print(df.describe(), "\n")
print("Shape:", df.shape, "\n")

df = df.dropna(subset=["Assessed Value", "Sale Amount"])
X1 = df["Assessed Value"].values.reshape(-1, 1)
y1 = df["Sale Amount"].values

X1_train, X1_test, y1_train, y1_test = train_test_split(
    X1, y1, test_size=0.10, random_state=42
)

model1 = LinearRegression()
model1.fit(X1_train, y1_train)

intercept1 = model1.intercept_
slope1 = model1.coef_[0]
print(f"Intercept: {intercept1}")
print(f"Slope: {slope1}")

def predict_sale_amount(assessed_value):
    return intercept1 + slope1 * assessed_value

sample_vals1 = df["Assessed Value"].sample(3, random_state=1).values
print("Predictions:")
for val in sample_vals1:
    print(f"Assessed Value = {val} → Predicted Sale Amount = {predict_sale_amount(val)}")

y1_pred = model1.predict(X1_test)

mae1 = mean_absolute_error(y1_test, y1_pred)
mse1 = mean_squared_error(y1_test, y1_pred)
rmse1 = math.sqrt(mse1)

print(f"MAE: {mae1}")
print(f"MSE: {mse1}")
print(f"RMSE: {rmse1}")
print("Thank you ❤️ ")

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error

print("Task 03")
file_path = "zameencom-property-data-By-Kaggle-Short - Copy.csv"

try:
    df = pd.read_csv(file_path, index_col="property_id", engine='python', sep=None)
except Exception as e:
    print("Initial read_csv failed. Trying with a guessed delimiter...")
    with open(file_path, 'r', encoding='utf-8') as f:
        sample = f.read(2048)
        import csv
        sniffer = csv.Sniffer()
        dialect = sniffer.sniff(sample)
    df = pd.read_csv(file_path, index_col="property_id", sep=dialect.delimiter, engine='python')

print("=== DataFrame Preview ===")
print(df.head())

print("\n=== .info() ===")
print(df.info()) 

print("\n=== .dtypes ===")
print(df.dtypes)

print("\n=== .describe() ===")
print(df.describe())

print("\n=== .shape ===")
print(df.shape)

df_clean = df[['bedrooms', 'price']].dropna()
X = df_clean[['bedrooms']].values
y = df_clean['price'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

intercept = model.intercept_
slope = model.coef_[0]
print(f"\n=== Model Parameters ===")
print(f"Intercept: {intercept}")
print(f"Slope: {slope}")

def predict_price(bedrooms):
    return intercept + slope * bedrooms

sample_bedrooms = [2, 3, 5]
print("\n=== Price Prediction for Sample Bedrooms ===")
for b in sample_bedrooms:
    print(f"Bedrooms: {b}, Predicted Price: {predict_price(b):,.2f}")

y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print("\n=== Metrics ===")
print(f"MAE: {mae:,.2f}")
print(f"MSE: {mse:,.2f}")
print(f"RMSE: {rmse:,.2f}")
print("Thank you ❤️ ")

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
print("Task 04")
file_path = "number-of-registered-medical-and-dental-doctors-by-gender-in-pakistan (1).csv"

df = pd.read_csv(file_path, index_col="Years", engine='python')

print("=== DataFrame ===")
print(df.head())

print("\n=== .info() ===")
print(df.info())

print("\n=== .dtypes ===")
print(df.dtypes)

print("\n=== .describe() ===")
print(df.describe())

print("\n=== .shape ===")
print(df.shape)

df_clean = df[['Female Doctors', 'Female Dentists']].dropna()
X = df_clean[['Female Doctors']].values
y = df_clean['Female Dentists'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)

model = LinearRegression()

print(f"\n=== Linear Model Parameters ===")
print(f"Intercept: {intercept}")
print(f"Slope: {slope}")

def predict_female_dentists(female_doctors):
    return intercept + slope * female_doctors

sample_values = [20000, 30000, 50000]
print("\n=== Sample Predictions ===")
for val in sample_values:
    prediction = predict_female_dentists(val)
    print(f"Female Doctors: {val} -> Predicted Female Dentists: {prediction:.2f}")

print("\n=== Evaluation Metrics ===")
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print("Thank you ❤️ ")

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error
print("Task 05")

file_path = "housing.csv"  
df = pd.read_csv(file_path)

print("=== First 5 Rows ===")
print(df.head())

print("\n=== .info() ===")
print(df.info())

print("\n=== Null values in each column ===")
print(df.isnull().sum())

df = df.dropna()

X = df.drop(['median_house_value', 'ocean_proximity'], axis=1)
y = df['median_house_value']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

print("\n=== Model Parameters ===")
print(f"Intercept: {model.intercept_}")
print("Coefficients:")
for feature, coef in zip(X.columns, model.coef_):
    print(f"{feature}: {coef}")

y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print("\n=== Evaluation Metrics ===")
print(f"Mean Absolute Error (MAE): {mae:,.2f}")
print(f"Mean Squared Error (MSE): {mse:,.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:,.2f}")
print("Thank you ❤️ ")

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
print("Task 06")
file_path = "raw_data.csv"
df = pd.read_csv(file_path)

df = df.dropna()

print("\n=== Numeric Columns ===")
print(df.select_dtypes(include=[np.number]).columns)

target_column = 'mpg'

numeric_df = df.select_dtypes(include=[np.number])

X = numeric_df.drop(target_column, axis=1)
y = numeric_df[target_column]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

print("\n=== Model Parameters ===")
print(f"Intercept: {model.intercept_}")
print("Coefficients:")
for feature, coef in zip(X.columns, model.coef_):
    print(f"{feature}: {coef}")

y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print("\n=== Evaluation Metrics ===")
print(f"MAE: {mae:.2f}")
print(f"MSE: {mse:.2f}")
print(f"RMSE: {rmse:.2f}")
print("Thank you ❤️ ")
